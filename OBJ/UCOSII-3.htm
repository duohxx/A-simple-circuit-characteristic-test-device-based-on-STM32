<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\UCOSII-3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\UCOSII-3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Mar 14 16:36:44 2020
<BR><P>
<H3>Maximum Stack Usage =        268 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[106]">cr4_fft_1024_stm32</a>
 <LI><a href="#[5a]">OS_CPU_SR_Save</a>
 <LI><a href="#[5c]">OS_CPU_SR_Restore</a>
 <LI><a href="#[174]">OSStartHighRdy</a>
 <LI><a href="#[173]">OSCtxSw</a>
 <LI><a href="#[171]">OSIntCtxSw</a>
 <LI><a href="#[b]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a2]">LCD_Fill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">LCD_Fill</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from chart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">FT5206_Scan</a> from ft5206.o(.text) referenced from touch.o(.text)
 <LI><a href="#[4a]">GT9147_Scan</a> from gt9147.o(.text) referenced from touch.o(.text)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[4f]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[163]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[15e]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[4b]">OTT2001A_Scan</a> from ott2001a.o(.text) referenced from touch.o(.text)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from delay.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">TP_Adjust</a> from touch.o(.text) referenced 2 times from touch.o(.data)
 <LI><a href="#[0]">TP_Init</a> from touch.o(.text) referenced 2 times from touch.o(.data)
 <LI><a href="#[1]">TP_Scan</a> from touch.o(.text) referenced 2 times from touch.o(.data)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[51]">fputc</a> from usart.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[54]">key_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[49]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[59]">main_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[68]">start_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[67]">touch_task</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1cf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[54]"></a>key_task</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = key_task &rArr; KEY_Scan &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>main_task</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; spectrometer &rArr; DSP_FFT1024 &rArr; PowerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initShow
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>touch_task</STRONG> (Thumb, 532 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = touch_task &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>start_task</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = main &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Picture
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>LED_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>KEY_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>Change_GPIOCode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRead
</UL>

<P><STRONG><a name="[55]"></a>KEY_Scan</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = KEY_Scan &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
</UL>

<P><STRONG><a name="[1d4]"></a>ShiftScreen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>estimate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>flag0</STRONG> (Thumb, 836 bytes, Stack size 48 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[8a]"></a>KeyRead</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_GPIOCode
</UL>

<P><STRONG><a name="[1d6]"></a>KEY_EXIT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>LCD_WR_REG</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[91]"></a>LCD_WR_DATA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8f]"></a>LCD_RD_DATA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[92]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[8c]"></a>LCD_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LCD_ReadReg &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[9a]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Picture
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[1d7]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[94]"></a>opt_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[90]"></a>LCD_SetCursor</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[93]"></a>LCD_ReadPoint</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_delay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[96]"></a>LCD_DisplayOn</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[97]"></a>LCD_DisplayOff</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[98]"></a>LCD_Scan_Dir</STRONG> (Thumb, 718 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[99]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Draw_Big_Point
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[9b]"></a>LCD_Draw_Circle</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[9c]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 278 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[76]"></a>LCD_Display_Dir</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>LCD_Set_Window</STRONG> (Thumb, 422 bytes, Stack size 52 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Picture
</UL>

<P><STRONG><a name="[77]"></a>LCD_Clear</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;underpainting
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initShow
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Picture
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>LCD_Init</STRONG> (Thumb, 14102 bytes, Stack size 128 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>LCD_Fill</STRONG> (Thumb, 178 bytes, Stack size 44 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;underpainting
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
</UL>

<P><STRONG><a name="[a3]"></a>LCD_Color_Fill</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>

<P><STRONG><a name="[83]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 68 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initShow
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[a4]"></a>LCD_DrawRectangle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[a5]"></a>Draw_Circle</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[a6]"></a>LCD_ShowChar</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[a7]"></a>LCD_Pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[89]"></a>LCD_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[a8]"></a>LCD_ShowxNum</STRONG> (Thumb, 218 bytes, Stack size 60 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[64]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;underpainting
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initShow
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[a9]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[aa]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[ab]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[ac]"></a>IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[ad]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[ae]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[af]"></a>IIC_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b0]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b1]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[b2]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>

<P><STRONG><a name="[b3]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Send_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>

<P><STRONG><a name="[b4]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[b5]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b6]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[b7]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
</UL>

<P><STRONG><a name="[b8]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Send_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[b9]"></a>TP_Write_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>

<P><STRONG><a name="[ba]"></a>TP_Read_AD</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>

<P><STRONG><a name="[bb]"></a>TP_Read_XOY</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>

<P><STRONG><a name="[bc]"></a>TP_Read_XY</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>

<P><STRONG><a name="[bd]"></a>TP_Read_XY2</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[be]"></a>TP_Drow_Touch_Point</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TP_Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[bf]"></a>TP_Draw_Big_Point</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, touch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_test
</UL>

<P><STRONG><a name="[1]"></a>TP_Scan</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TP_Scan &rArr; TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; TP_Write_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>TP_Save_Adjdata</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TP_Save_Adjdata &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Send_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[c6]"></a>TP_Get_Adjdata</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TP_Get_Adjdata &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[c7]"></a>TP_Adj_Info_Show</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[2]"></a>TP_Adjust</STRONG> (Thumb, 2128 bytes, Stack size 96 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>TP_Init</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = TP_Init &rArr; TP_Adjust &rArr; TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>CT_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>

<P><STRONG><a name="[d3]"></a>CT_IIC_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[d4]"></a>CT_IIC_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Start &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>

<P><STRONG><a name="[d5]"></a>CT_IIC_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[d6]"></a>CT_IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>

<P><STRONG><a name="[d7]"></a>CT_IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Ack &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[d8]"></a>CT_IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[d9]"></a>CT_IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>

<P><STRONG><a name="[da]"></a>CT_IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ctiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
</UL>

<P><STRONG><a name="[db]"></a>OTT2001A_WR_Reg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ott2001a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OTT2001A_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
</UL>

<P><STRONG><a name="[dc]"></a>OTT2001A_RD_Reg</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ott2001a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[dd]"></a>OTT2001A_SensorControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ott2001a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OTT2001A_SensorControl &rArr; OTT2001A_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
</UL>

<P><STRONG><a name="[d0]"></a>OTT2001A_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ott2001a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OTT2001A_Init &rArr; OTT2001A_SensorControl &rArr; OTT2001A_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_SensorControl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[4b]"></a>OTT2001A_Scan</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, ott2001a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OTT2001A_Scan &rArr; OTT2001A_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_RD_Reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>FT5206_WR_Reg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ft5206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FT5206_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[e0]"></a>FT5206_RD_Reg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ft5206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Scan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
</UL>

<P><STRONG><a name="[d1]"></a>FT5206_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ft5206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = FT5206_Init &rArr; FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_WR_Reg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[4c]"></a>FT5206_Scan</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, ft5206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = FT5206_Scan &rArr; FT5206_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_RD_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>GT9147_WR_Reg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gt9147.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GT9147_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[e2]"></a>GT9147_Send_Cfg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gt9147.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GT9147_Send_Cfg &rArr; GT9147_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[e3]"></a>GT9147_RD_Reg</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gt9147.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Scan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[cf]"></a>GT9147_Init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, gt9147.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GT9147_Init &rArr; GT9147_Send_Cfg &rArr; GT9147_WR_Reg &rArr; CT_IIC_Send_Byte &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Send_Cfg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[4a]"></a>GT9147_Scan</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, gt9147.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GT9147_Scan &rArr; GT9147_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; CT_Delay &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_RD_Reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_WR_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>ADCx_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADCx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Get_ADC_Value</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_ADC_Value &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[f1]"></a>Get_ADC_Value_fast</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_ADC_Value_fast &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
</UL>

<P><STRONG><a name="[fb]"></a>ADC1_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
</UL>

<P><STRONG><a name="[fc]"></a>WriFre1000</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WriFre1000 &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[5b]"></a>initShow</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = initShow &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[ff]"></a>underpainting</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = underpainting &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[100]"></a>PowerMag</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PowerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_FFT1024
</UL>

<P><STRONG><a name="[103]"></a>Compare_Max</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Compare_Max &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
</UL>

<P><STRONG><a name="[105]"></a>DSP_FFT1024</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DSP_FFT1024 &rArr; PowerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_1024_stm32
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
</UL>

<P><STRONG><a name="[61]"></a>spectrometer</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = spectrometer &rArr; DSP_FFT1024 &rArr; PowerMag &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_FFT1024
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Max
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>Load_Drow_Dialog</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, chart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_test
</UL>

<P><STRONG><a name="[10b]"></a>gui_draw_hline</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, chart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
</UL>

<P><STRONG><a name="[10c]"></a>gui_fill_circle</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, chart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_bline
</UL>

<P><STRONG><a name="[1d8]"></a>my_abs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chart.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>lcd_draw_bline</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, chart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_fill_circle
</UL>

<P><STRONG><a name="[10e]"></a>rtp_test</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, chart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Draw_Big_Point
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[78]"></a>Show_Picture</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, chart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Show_Picture &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>amp_fre</STRONG> (Thumb, 3136 bytes, Stack size 56 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = amp_fre &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[5e]"></a>Rin</STRONG> (Thumb, 658 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Rin &rArr; WriFre1000 &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;underpainting
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriFre1000
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[5f]"></a>Rout</STRONG> (Thumb, 1186 bytes, Stack size 56 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Rout &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[63]"></a>judgeC</STRONG> (Thumb, 1138 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = judgeC &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[62]"></a>estimate_device</STRONG> (Thumb, 1292 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = estimate_device &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[60]"></a>gain</STRONG> (Thumb, 1254 bytes, Stack size 40 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gain &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[106]"></a>cr4_fft_1024_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_1024_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_FFT1024
</UL>

<P><STRONG><a name="[113]"></a>OLED_WR_Byte</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>

<P><STRONG><a name="[112]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[114]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[115]"></a>OLED_Display_On</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[116]"></a>OLED_Display_Off</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[117]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[119]"></a>OLED_DrawPoint</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowFontHZ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[118]"></a>OLED_Fill</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>

<P><STRONG><a name="[11a]"></a>OLED_ShowChar</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[11b]"></a>oled_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[111]"></a>OLED_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_pow
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
</UL>

<P><STRONG><a name="[110]"></a>OLED_ShowString</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
</UL>

<P><STRONG><a name="[11c]"></a>OLED_ShowFontHZ</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>

<P><STRONG><a name="[11d]"></a>OLED_DrawBMP</STRONG> (Thumb, 120 bytes, Stack size 36 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[11e]"></a>OLED_Init</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[11f]"></a>Timerx_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>

<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>TIM2_Configuration</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_Init
</UL>

<P><STRONG><a name="[12c]"></a>TIM2_NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_Init
</UL>

<P><STRONG><a name="[12d]"></a>TIME2_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>delay1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad9959.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Update
</UL>

<P><STRONG><a name="[12e]"></a>IO_Update</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IO_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_AD9959
</UL>

<P><STRONG><a name="[130]"></a>WriteData_AD9959</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteData_AD9959 &rArr; IO_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Phase
</UL>

<P><STRONG><a name="[fd]"></a>Write_Amplitude</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_Amplitude &rArr; WriteData_AD9959 &rArr; IO_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_AD9959
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriFre1000
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>Write_Phase</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Write_Phase &rArr; WriteData_AD9959 &rArr; IO_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_AD9959
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
</UL>

<P><STRONG><a name="[fe]"></a>Write_frequence</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_AD9959
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriFre1000
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>IntReset</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IntReset
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
</UL>

<P><STRONG><a name="[133]"></a>Intserve</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ad9959.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
</UL>

<P><STRONG><a name="[70]"></a>Init_AD9959</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, ad9959.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Init_AD9959 &rArr; Write_frequence &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Amplitude
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intserve
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntReset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Phase
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_AD9959
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>delay_osschedlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = delay_osschedlock &rArr; OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[136]"></a>delay_osschedunlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[138]"></a>delay_ostimedly</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = delay_ostimedly &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>delay_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>delay_us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_Delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Write_Byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[56]"></a>delay_ms</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtp_test
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeC
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[1d9]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[72]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[1da]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1dc]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1df]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1e4]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>FSMC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[145]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[1ed]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[1ee]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[1f1]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[146]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1fb]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[206]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AD9959
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[120]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[144]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[149]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[20a]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13e]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[210]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[13f]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[213]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[121]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[227]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[228]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[151]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14f]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[14d]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[14b]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[154]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[22a]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[22f]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[230]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[156]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[155]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[157]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[159]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[158]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[15a]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[233]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[23f]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[253]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[e7]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[267]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[f9]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[268]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[ea]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[eb]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[ec]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[ed]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Init
</UL>

<P><STRONG><a name="[269]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[fa]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[f0]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[26c]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value_fast
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[27b]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[f6]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[27e]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[f7]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config
</UL>

<P><STRONG><a name="[27f]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[15e]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[79]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13c]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[135]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[172]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[137]"></a>OSSchedUnlock</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[7a]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[13b]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[283]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[177]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[176]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[18b]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[189]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[1a8]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[181]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
</UL>

<P><STRONG><a name="[178]"></a>OS_TCBInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[17b]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[17c]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[17e]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[17f]"></a>OSFlagDel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[180]"></a>OSFlagNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[182]"></a>OSFlagNameSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[183]"></a>OSFlagPend</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[185]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[186]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[187]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16c]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[188]"></a>OSMboxAccept</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[69]"></a>OSMboxCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[18a]"></a>OSMboxDel</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[66]"></a>OSMboxPend</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSMboxPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[18c]"></a>OSMboxPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[57]"></a>OSMboxPost</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
</UL>

<P><STRONG><a name="[18d]"></a>OSMboxPostOpt</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[18e]"></a>OSMboxQuery</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[18f]"></a>OSQAccept</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[190]"></a>OSQCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[191]"></a>OSQDel</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[192]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[193]"></a>OSQPend</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[194]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[195]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[196]"></a>OSQPostFront</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[197]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[198]"></a>OSQQuery</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16d]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[199]"></a>OSSemAccept</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[6a]"></a>OSSemCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[19a]"></a>OSSemDel</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[65]"></a>OSSemPend</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[19b]"></a>OSSemPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[58]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[19c]"></a>OSSemQuery</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[19d]"></a>OSSemSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[19e]"></a>OSTaskChangePrio</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[6c]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1a0]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[161]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[1a1]"></a>OSTaskDel</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1a4]"></a>OSTaskDelReq</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1a5]"></a>OSTaskNameGet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[162]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[1a6]"></a>OSTaskResume</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[15d]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[6d]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1a7]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[1a9]"></a>OSTaskRegGet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1aa]"></a>OSTaskRegSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ab]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[139]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1ad]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[1ae]"></a>OSTimeDlyResume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1af]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b0]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b1]"></a>OSTmrCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
</UL>

<P><STRONG><a name="[1b3]"></a>OSTmrDel</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[1b6]"></a>OSTmrNameGet</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1b7]"></a>OSTmrRemainGet</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1b8]"></a>OSTmrStateGet</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[1b9]"></a>OSTmrStart</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[1bb]"></a>OSTmrStop</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>

<P><STRONG><a name="[1bc]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[16e]"></a>OSTmr_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5a]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[5c]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[174]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[173]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[171]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16f]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17a]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1a3]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[164]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[15f]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[19f]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[50]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[175]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1ac]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[e5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Max
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spectrometer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_frequence
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Scan
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag0
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
</UL>

<P><STRONG><a name="[285]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_fre
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Max
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gain
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;estimate_device
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rout
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rin
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[286]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[287]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[288]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1be]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1c4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c8]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[28a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28d]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[a1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTT2001A_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9147_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT5206_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[28e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[290]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1cc]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[c8]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMag
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[7c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f2]"></a>ADC1_GPIO_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[f3]"></a>ADC1_Mode_Config</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigConvCmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[152]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[150]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14e]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[14c]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[160]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[165]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[166]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[168]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16b]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16a]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[170]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[17d]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[184]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[1b2]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[1b5]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[1b4]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1ba]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[4f]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[1bd]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
